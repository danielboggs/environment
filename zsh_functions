# Print your public IPv4 address
function publicip () {
  curl -s http://whatismyip.akamai.com/;
  printf "\n";
}

# Print your LAN IPv4 address
function localip () {
  (awk '{print $2}' <(ifconfig en0 | grep 'inet '));
}

# Extract nearly any command-line archive
function extract () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)  tar xjf $1     ;;
      *.tar.gz)   tar xzf $1     ;;
      *.bz2)      bunzip2 $1     ;;
      *.rar)      unrar e $1     ;;
      *.gz)       gunzip $1      ;;
      *.tar)      tar xf $1      ;;
      *.tbz2)     tar xjf $1     ;;
      *.tgz)      tar xzf $1     ;;
      *.zip)      unzip $1       ;;
      *.Z)        uncompress $1  ;;
      *.7z)       7z x $1        ;;
      *)          echo "'$1' cannot be extracted via extract()" ;;
      esac
  else
    echo "'$1' is not a valid file"
  fi
}

# -----------------------------------------------------------------------------
# CHRUBY
# -----------------------------------------------------------------------------

# Install a version of MRI with ruby-install
function chruby-install {
  ruby-install --cleanup --no-install-deps ruby $1
}

# -----------------------------------------------------------------------------
# HEROKU
# -----------------------------------------------------------------------------

# Shorthand commands
alias fs="foreman start"
alias hc="heroku run rails console"
alias htail="heroku logs --tail"
alias hps="heroku ps"
alias hadd="heroku config:add"
alias hgit="heroku git:remote --ssh-git"

# Migrate Heroku DB and restart
function hmigrate {
  heroku pgbackups:capture --expire && \
  heroku run rake db:migrate && \
  heroku restart
}

# Turn the Heroku app on and off quickly
function hoff {
  heroku scale web=0 && \
  heroku maintenance:on
}

# Turn the Heroku app on and off quickly
function hon {
  heroku scale web=1 && \
  heroku maintenance:off
}

# Deploy to Heroku, with optional extra commands, ex:
# hdeploy
# hdeploy migrate
# hdeploy seed administrators
function hdeploy {
  if [[ "$1" = "migrate" ]]; then
    git push github && \
    heroku maintenance:on && \
    heroku pgbackups:capture --expire && \
    git push heroku && \
    heroku run rake db:migrate && \
    heroku restart && \
    heroku maintenance:off
  elif [[ "$1" = "seed" && -n "$2" ]]; then
    git push github && \
    heroku maintenance:on && \
    heroku pgbackups:capture --expire && \
    git push heroku && \
    heroku run rake db:migrate && \
    heroku run rake db:seed_fu FILTER=$2 && \
    heroku restart && \
    heroku maintenance:off
  else
    git push github && \
    git push heroku
  fi
}

# Print out the Heroku config as if it was a .env file
function henv {
  heroku config --shell
}

# Empty the Heroku repo cache and force-rebuild the application
function hrebuild {
  heroku repo:purge_cache
  heroku repo:rebuild
}

# -----------------------------------------------------------------------------
# POSTGRES FUNCTIONS
# -----------------------------------------------------------------------------

# Dump a local database
function dumpdb {
  pg_dump --clean --format=custom --no-acl --verbose --file=$1.dump $1 && \
  echo "✔ Written to ./$1.dump"
}

# Restore a database locally
# https://devcenter.heroku.com/articles/heroku-postgres-import-export
alias restoredb="pg_restore --verbose --clean --no-acl --no-owner -d"

# Dump the current heroku production database to a file
function hdump {
  heroku pgbackups:capture --expire && \
  wget -O ~/Downloads/latest.dump `heroku pgbackups:url` && \
  echo "✔ Written to ~/Downloads/latest.dump"
}

# Download the current Heroku database and replace the local one
function hpgpull {
  dropdb $1
  heroku pg:pull DATABASE $1 && \
  echo "✔ Local database $1 overwritten with production data"
}
